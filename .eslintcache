[{"/Users/nisha_mcnealis/Documents/GitHub/melody-mapper/src/index.js":"1","/Users/nisha_mcnealis/Documents/GitHub/melody-mapper/src/App.js":"2","/Users/nisha_mcnealis/Documents/GitHub/melody-mapper/src/components/main.component.js":"3","/Users/nisha_mcnealis/Documents/GitHub/melody-mapper/src/components/questions.component.js":"4","/Users/nisha_mcnealis/Documents/GitHub/melody-mapper/src/components/profile.component.js":"5","/Users/nisha_mcnealis/Documents/GitHub/melody-mapper/src/components/create-account.component.js":"6"},{"size":146,"mtime":1613716030461,"results":"7","hashOfConfig":"8"},{"size":683,"mtime":1613716030461,"results":"9","hashOfConfig":"8"},{"size":2736,"mtime":1613716030461,"results":"10","hashOfConfig":"8"},{"size":7550,"mtime":1613716030461,"results":"11","hashOfConfig":"8"},{"size":1207,"mtime":1613716030461,"results":"12","hashOfConfig":"8"},{"size":3499,"mtime":1613716030461,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1beej9s",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/nisha_mcnealis/Documents/GitHub/melody-mapper/src/index.js",[],"/Users/nisha_mcnealis/Documents/GitHub/melody-mapper/src/App.js",[],["29","30"],"/Users/nisha_mcnealis/Documents/GitHub/melody-mapper/src/components/main.component.js",[],"/Users/nisha_mcnealis/Documents/GitHub/melody-mapper/src/components/questions.component.js",["31"],"import React, { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport axios from 'axios'\n\nfunction Questions() {\n    const [ username, setUsername ] = useState(\"\")\n    const [ password, setPassword ] = useState(\"\")\n    const [ emailAddress, setEmailAddress ] = useState(\"\")\n    const [ firstName, setFirstName ] = useState(\"\")\n    const [ responses, setResponses ] = useState([3,3,3,3,3,3,3,3,3,3])\n    let params = useParams()\n\n    let changeResponses = (index, value) => {\n        let newResponses = [...responses];\n        newResponses[index] = parseInt(value);\n        setResponses(newResponses)\n        console.log(newResponses)\n    }\n\n    async function onSubmit (event) {\n        event.preventDefault();\n        //predict music genre\n        const data = {\n            inputdata: responses\n        }\n        let genre = 0;\n        try {\n            genre = await axios.post('http://localhost:5000/predict', data);\n            console.log(genre)\n        } catch (error) {\n            handleErrorEdit(error);\n        } finally {\n            updateAccount(genre.data);\n        }\n    }\n\n    let updateAccount = (genre) => {\n        const user = {\n            username: username,\n            password: password,\n            firstName: firstName,\n            emailAddress: emailAddress,\n            musicGenre: genre\n        }\n\n        console.log(user)\n        \n        axios.post('http://localhost:8000/users/updateaccount/'+params.id, user)\n            .then(res => handleSuccess(res))\n            .catch(error => handleErrorEdit(error))\n    }\n\n    let handleSuccess = (res) => {\n        console.log(res)\n        console.log('Successful Response')\n        window.location = '/profile/'+res.data.user._id\n    }\n\n    let handleErrorEdit = (error) => {\n        let errorMessage\n        if(error.response && error.response.data) {\n            //Error Responses\n            if(error.response.data.type){\n                errorMessage = error.response.data.type\n            }\n            else {\n                errorMessage = error.response.data\n            }\n        } else if(error.request) {\n            // Network failures, etc.\n            errorMessage = error.request.message || error.request.statusText;\n        } else {\n            //Other errors\n            errorMessage= error.message\n        }\n        console.log(errorMessage)\n        alert(errorMessage)\n    }\n\n    let deleteAccount = () => {\n        axios.delete('http://localhost:8000/users/'+params.id)\n            .then(res => {\n                console.log(res.data)\n                window.location = '/'\n            })\n    }\n\n    useEffect(() => {\n        axios.get('http://localhost:8000/users/'+params.id)\n            .then(response => {\n                const user = response.data\n                setUsername(user.username)\n                setFirstName(user.firstName)\n                setEmailAddress(user.emailAddress)\n                setPassword(user.password)\n            })\n            .catch(function(error){\n                console.log(error)\n            })\n    }, [])\n\n    return (\n        <div>\n            <h3>Welcome {firstName}</h3>\n            <h4>Before you join us, we'll need you to just answer a few question</h4>\n            <button onClick={deleteAccount}>What? No way!</button>\n            <br/>\n            <br/>\n            <form onSubmit={onSubmit}>\n                <label>I enjoy horror movies: \n                    <input \n                        type=\"range\" \n                        id=\"fader\" \n                        value={responses[0]}\n                        onChange={event => changeResponses(0, event.target.value)} \n                        min=\"1\" max=\"5\"></input>\n                </label>\n                <br/>\n                <br/>\n                <label>I enjoy romanctic movies:\n                    <input \n                        type=\"range\" \n                        id=\"fader\" \n                        value={responses[1]}\n                        onChange={event => changeResponses(1, event.target.value)} \n                        min=\"1\" max=\"5\"></input>\n                </label>\n                <br/>\n                <br/>\n                <label>I enjoy action movies:\n                    <input \n                        type=\"range\" \n                        id=\"fader\" \n                        value={responses[2]}\n                        onChange={event => changeResponses(2, event.target.value)}\n                        min=\"1\" max=\"5\"></input>\n                </label>\n                <br/>\n                <br/>\n                <label>I enjoy learning about history: \n                    <input \n                        type=\"range\" \n                        id=\"fader\" \n                        value={responses[3]}\n                        onChange={event => changeResponses(3, event.target.value)}\n                        min=\"1\" max=\"5\"></input>\n                </label>\n                <br/>\n                <br/>\n                <label>I enjoy playing musical instruments: \n                    <input \n                        type=\"range\" \n                        id=\"fader\" \n                        value={responses[4]}\n                        onChange={event => changeResponses(4, event.target.value)}\n                        min=\"1\" max=\"5\"></input>\n                </label>\n                <br/>\n                <br/>\n                <label>I enjoy learning about science and technology: \n                    <input \n                        type=\"range\" \n                        id=\"fader\" \n                        value={responses[5]}\n                        onChange={event => changeResponses(5, event.target.value)}\n                        min=\"1\" max=\"5\"></input>\n                </label>\n                <br/>\n                <br/>\n                <label>I enjoy socializing: \n                    <input \n                        type=\"range\" \n                        id=\"fader\" \n                        value={responses[6]}\n                        onChange={event => changeResponses(6, event.target.value)}\n                        min=\"1\" max=\"5\"></input>\n                </label>\n                <br/>\n                <br/>\n                <label>I enjoy extreme sports: \n                    <input \n                        type=\"range\" \n                        id=\"fader\" \n                        value={responses[7]}\n                        onChange={event => changeResponses(7, event.target.value)}\n                        min=\"1\" max=\"5\"></input>\n                </label>\n                <br/>\n                <br/>\n                <label>I am very patient: \n                    <input \n                        type=\"range\" \n                        id=\"fader\" \n                        value={responses[8]}\n                        onChange={event => changeResponses(8, event.target.value)}\n                        min=\"1\" max=\"5\"></input>\n                </label>\n                <br/>\n                <br/>\n                <label>If I find something the doesn't belong to me I will hand it in: \n                    <input \n                        type=\"range\" \n                        id=\"fader\" \n                        value={responses[9]}\n                        onChange={event => changeResponses(9, event.target.value)}\n                        min=\"1\" max=\"5\"></input>\n                </label>\n                <br/>\n                <br/>\n                <button type=\"submit\">Generate Music Preference</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Questions;","/Users/nisha_mcnealis/Documents/GitHub/melody-mapper/src/components/profile.component.js",["32","33","34"],"import React, { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport axios from 'axios'\n\nfunction Profile() {\n    const [ username, setUsername ] = useState(\"\")\n    const [ firstName, setFirstName ] = useState(\"\")\n    const [ emailAddress, setEmailAddress ] = useState(\"\")\n    const [ musicGenre, setMusicGenre ] = useState(0)\n    let params = useParams()\n\n    useEffect(() => {\n        axios.get('http://localhost:8000/users/'+params.id)\n            .then(response => {\n                const user = response.data\n                setUsername(user.username)\n                setFirstName(user.firstName)\n                setEmailAddress(user.emailAddress)\n                setMusicGenre(user.musicGenre)\n            })\n            .catch(function(error){\n                console.log(error)\n            })\n    }, [])\n\n    let onHomePage = (event) => {\n        event.preventDefault();\n        console.log(\"Home Page\")\n        window.location = '/'\n    }\n\n    return (\n        <div>\n            <h3>Hello {firstName}!</h3>\n            <p>Your music genre is {musicGenre}</p>\n            <button onClick={onHomePage}>Log out</button>\n        </div>\n    )\n}\n\nexport default Profile;","/Users/nisha_mcnealis/Documents/GitHub/melody-mapper/src/components/create-account.component.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":100,"column":8,"nodeType":"41","endLine":100,"endColumn":10,"suggestions":"42"},{"ruleId":"43","severity":1,"message":"44","line":7,"column":13,"nodeType":"45","messageId":"46","endLine":7,"endColumn":21},{"ruleId":"43","severity":1,"message":"47","line":9,"column":13,"nodeType":"45","messageId":"46","endLine":9,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":25,"column":8,"nodeType":"41","endLine":25,"endColumn":10,"suggestions":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["51"],"no-unused-vars","'username' is assigned a value but never used.","Identifier","unusedVar","'emailAddress' is assigned a value but never used.",["52"],"no-global-assign","no-unsafe-negation",{"desc":"53","fix":"54"},{"desc":"53","fix":"55"},"Update the dependencies array to be: [params.id]",{"range":"56","text":"57"},{"range":"58","text":"57"},[3071,3073],"[params.id]",[874,876]]